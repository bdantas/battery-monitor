#!/bin/sh

# battery-monitor v7.3
# Bruno "GNUser" Dantas GPLv3

# user variables:
sys_dir=/sys/class/power_supply/BAT0
icon_dir=/usr/share/icons/battery-monitor
sound_dir=/usr/share/sounds/battery-monitor

main()
{
	create_icon

	while true; do 
		calculate
		update_icon
		make_sounds
		sleep 10 & wait $! # put sleep in background so that script can catch signals during sleep
	done
}

create_icon()
{
	mktrayicon $pipe &
}

calculate()
{
	remaining_percent="$(cat $sys_dir/capacity)"

	usage_now=$(cat $sys_dir/power_now) # e.g., 13,000,000 (microW)
	capacity_now=$(cat $sys_dir/energy_now) # e.g., 26,216,660 (microWh)
	minutes_remaining=$(awk -v usage_now=$usage_now -v capacity_now=$capacity_now \
		'BEGIN {printf "%.0f", capacity_now/usage_now*60}') # e.g., 121
	hours=$(( minutes_remaining / 60 )) # e.g., 2
	minutes=$(( minutes_remaining % 60 )); minutes=$(printf '%02d' $minutes) # e.g., 01
	remaining_time="${hours}:${minutes}" # e.g., 2:01

	if cat $sys_dir/status | egrep -q 'Charging|Unknown|Full'; then
		suffix="-charging"
		remaining_time="a/c"
	else
		suffix=""
	fi

	if [ "$remaining_percent" -ge 80 ]; then
		icon="battery-full${suffix}.png"
	elif [ "$remaining_percent" -ge 20 ]; then
		icon="battery-good${suffix}.png"
	elif [ "$remaining_percent" -ge 10 ]; then
		icon="battery-low${suffix}.png"
	else
		icon="battery-caution${suffix}.png"
	fi
}

update_icon()
{
	echo "i $icon_dir/$icon" >$pipe
	printf "t '${remaining_percent}%%\n${remaining_time}'\n" >$pipe
}

make_sounds()
{
	[ -z "$status_memory" ] && status_memory="--"
	[ -z "$ac_memory" ] && ac_memory="--"

	# make low battery sound if indicated
	[ "$remaining_percent" -ge 10 ] && status=g || status=b # g for good, b for bad
	status_memory="${status_memory}${status}" # append current status to memory
	status_memory=$(echo $status_memory | grep -o '..$') # keep only last two characters of memory
	[ "$status_memory" = "gb" ] && aplay $sound_dir/battery-alarm.wav

	# make ac event sound if indicated
	[ "$suffix" = "-charging" ] && ac=1 || ac=0
	ac_memory="${ac_memory}${ac}"
	ac_memory=$(echo $ac_memory | grep -o '..$')
	[ "$ac_memory" = "01" ] && aplay $sound_dir/device-added.wav
	[ "$ac_memory" = "10" ] && aplay $sound_dir/device-removed.wav
}

die()
{
	echo "q" >$pipe
	rm $pipe
	exit
}
trap die INT HUP TERM

# internal variables:
pipe=/tmp/$(basename $0)-pipe; mkfifo $pipe

main
